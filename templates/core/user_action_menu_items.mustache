{{!
    This file is part of Moodle - http://moodle.org/

    Moodle is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Moodle is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
}}
{{!
    @template core/user_action_menu_items

    Template for user action menu items.

    Context variables required for this template:
    * items - The different items to be rendered
        * link - If a link is provided render it.
          * title - The text to be shown for the link.
          * url - The href for the link.
          * pixicon - (Optional) The Moodle icon to use
          * imgsrc - (Optional) If provided, uses this as source for an image tag. Note: pixicon is preferred.
        * submenulink - If a submenu link is provided render it.
          * submenuid - The id of the targeted submenu.
          * title - The text to be shown for the link.
          * pixicon - (Optional) The Moodle icon to use.
          * imgsrc - (Optional) If provided, uses this as source for an image tag. Note: pixicon is preferred.
        * divider - Whether a divider is to be displayed or not

    Example context (json):
    {
        "items": [
            {
                "link": {
                    "title": "Github user",
                    "url": "https://raw.githubusercontent.com/",
                    "pixicon": "t/dashboard",
                    "imgsrc": "https://raw.githubusercontent.com/moodle/moodle/master/pix/t/check.png"
                },
                "divider": 1
            },
            {
                "submenulink": {
                    "title": "Title",
                    "submenuid": "86cebd87",
                    "pixicon": "t/dashboard",
                    "imgsrc": "https://raw.githubusercontent.com/moodle/moodle/master/pix/t/check.png"
                },
                "divider": 1
            }
        ]
    }
}}
<li class="drawer-item" id="settingsvisual">
        Preferencias visuais:
    <div class="custom-control custom-radio mb-2">
        <input type="radio" class="custom-control-input" id="part-up" name="visual" value="part-up">
        <label class="custom-control-label ms-2" for="part-up">
            Parte superior
        </label>
    </div>
    <div class="custom-control custom-radio mb-2">
        <input type="radio"  class="custom-control-input" id="part-down" name="visual" value="part-down">
        <label class="custom-control-label ms-2" for="part-down">
            Parte inferior
        </label>
    </div>

</li>




{{#items}}
    {{#link}}
        <li class="drawer-item">
            <a href="{{{url}}}" class="dropdown-item" role="menuitem" tabindex="-1">
                {{#pixicon}}
                    {{#pix}}{{pixicon}}{{/pix}}
                {{/pixicon}}
                {{^pixicon}}
                    {{#imgsrc}}<img aria-hidden="true" src="{{imgsrc}}" alt="{{title}}"/>{{/imgsrc}}
                {{/pixicon}}
                {{title}}
            </a>
        </li>
    {{/link}}
{{/items}}


{{#items_theme_suap}}
    {{#link}}
        <li class="drawer-item">
            <a href="{{{url}}}" class="dropdown-item" role="menuitem" tabindex="-1">
                {{#pixicon}}
                    {{#pix}}{{pixicon}}{{/pix}}
                {{/pixicon}}
                {{^pixicon}}
                    {{#imgsrc}}<img aria-hidden="true" src="{{imgsrc}}" alt="{{title}}"/>{{/imgsrc}}
                {{/pixicon}}
                {{title}}
            </a>
        </li>
    {{/link}}
{{/items_theme_suap}}



{{#js}}
    // Função para definir um cookie
    function setCookie(name, value, days) {
        const date = new Date();
        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000)); //
        const expires = "expires=" + date.toUTCString();
        document.cookie = name + "=" + value + ";" + expires + ";path=/";
    }

    // Função para ler um cookie
    function getCookie(name) {
        const nameEQ = name + "=";
        const ca = document.cookie.split(';');
        for (let i = 0; i < ca.length; i++) {
            let c = ca[i].trim();
            if (c.indexOf(nameEQ) === 0) {
                return c.substring(nameEQ.length, c.length);
            }
        }
        return null;
    }

    // Função para atualizar a interface com base na seleção de "part-up" ou "part-down"
    function updateContent(isPartUp) {
        radiopartup.checked = isPartUp;
        radiopartdown.checked = !isPartUp;

        if (isPartUp) {
            contentpart1.classList.remove('content-teste1');
            countcontent.classList.remove('teste');
        } else {
            contentpart1.classList.add('content-teste1');
            countcontent.classList.add('teste');
        }
    }

    // Função para guardar a preferência num cookie
    function savePreference(value) {
        setCookie('visualPreference', value, 180); // Guarda por 180 dias(6 meses)
        console.log("Saved preference in cookie:", value);
    }

    // Elementos da página
    const radiopartup = document.querySelector('#part-up');
    const radiopartdown = document.querySelector('#part-down');
    const contentpart1 = document.querySelector('#content-part1');
    const countcontent = document.querySelector('#counter-content');

    // Recuperar valor do cookie
    const savedRadioValue = getCookie('visualPreference');
    console.log("SavedRadioValue from cookie:", savedRadioValue);

    // Atualizar interface com base no valor guardado no cookie
    if (savedRadioValue === 'part-up') {
        updateContent(true);
    } else if (savedRadioValue === 'part-down') {
        updateContent(false);
    }

    // Adicionar listeners para os radio buttons
    radiopartdown.addEventListener('click', () => {
        updateContent(false);
        savePreference(radiopartdown.value);
    });

    radiopartup.addEventListener('click', () => {
        updateContent(true);
        savePreference(radiopartup.value);
    });





{{/js}}
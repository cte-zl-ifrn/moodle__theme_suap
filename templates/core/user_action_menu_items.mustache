{{!
    This file is part of Moodle - http://moodle.org/

    Moodle is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Moodle is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
}}
{{!
    @template core/user_action_menu_items

    Template for user action menu items.

    Context variables required for this template:
    * items - The different items to be rendered
        * link - If a link is provided render it.
          * title - The text to be shown for the link.
          * url - The href for the link.
          * pixicon - (Optional) The Moodle icon to use
          * imgsrc - (Optional) If provided, uses this as source for an image tag. Note: pixicon is preferred.
        * submenulink - If a submenu link is provided render it.
          * submenuid - The id of the targeted submenu.
          * title - The text to be shown for the link.
          * pixicon - (Optional) The Moodle icon to use.
          * imgsrc - (Optional) If provided, uses this as source for an image tag. Note: pixicon is preferred.
        * divider - Whether a divider is to be displayed or not

    Example context (json):
    {
        "items": [
            {
                "link": {
                    "title": "Github user",
                    "url": "https://raw.githubusercontent.com/",
                    "pixicon": "t/dashboard",
                    "imgsrc": "https://raw.githubusercontent.com/moodle/moodle/master/pix/t/check.png"
                },
                "divider": 1
            },
            {
                "submenulink": {
                    "title": "Title",
                    "submenuid": "86cebd87",
                    "pixicon": "t/dashboard",
                    "imgsrc": "https://raw.githubusercontent.com/moodle/moodle/master/pix/t/check.png"
                },
                "divider": 1
            }
        ]
    }
}}


<li class="drawer-item" id="settingsvisual">
    <div >
        <div class="custom-control custom-switch">
            <input type="checkbox" class="custom-control-input" id="preferVisual" checked="">
            <label class="custom-control-label" for="preferVisual">
                Preferência visual: parte inferior
            </label>
        </div>
    </div>
</li>

{{#items_theme_suap}}
    {{#link}}
        <li class="drawer-item {{{class}}}" id="{{{id}}}">
            <a href="{{{url}}}" class="dropdown-item" role="menuitem" tabindex="-1">
                {{title}}
            </a>
        </li>
    {{/link}}
{{/items_theme_suap}}

{{#items}}
    {{#link}}
        <li class="drawer-item {{{class}}}" >
            <a href="{{{url}}}" class="dropdown-item" role="menuitem" tabindex="-1">
                {{title}}
            </a>
        </li>
    {{/link}}
{{/items}}




{{#js}}

// Funções para manipular cookies
function setCookie(name, value, days) {
    const date = new Date();
    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
    const expires = "expires=" + date.toUTCString();
    document.cookie = name + "=" + value + ";" + expires + ";path=/";
}

function getCookie(name) {
    const nameEQ = name + "=";
    const decodedCookie = decodeURIComponent(document.cookie);
    const cookiesArray = decodedCookie.split(';');
    for (let i = 0; i < cookiesArray.length; i++) {
        let cookie = cookiesArray[i].trim();
        if (cookie.indexOf(nameEQ) === 0) {
            return cookie.substring(nameEQ.length, cookie.length);
        }
    }
    return null;
}

// Seleciona os elementos do DOM
const contentpart1 = document.querySelector('#content-part1');
const countcontent = document.querySelector('#counter-content');

// Evento 'change' para o checkbox
document.getElementById('preferVisual').addEventListener('change', function() {
    if (this.checked) {
        contentpart1.classList.add('content-original');
        countcontent.classList.add('content-reverse');
        setCookie('visualPreference', 'checked', 7); // Salva o estado no cookie
    } else {
        contentpart1.classList.remove('content-original');
        countcontent.classList.remove('content-reverse');
        setCookie('visualPreference', 'unchecked', 7); // Salva o estado no cookie
    }
});

// Restaurar o estado com base no cookie quando a página é carregada
window.onload = function() {
    const cookieValue = getCookie('visualPreference');
    const checkbox = document.getElementById('preferVisual');

    if (cookieValue === 'checked') {
        checkbox.checked = true;
        contentpart1.classList.add('content-original');
        countcontent.classList.add('content-reverse');
    } else {
        checkbox.checked = false;
        contentpart1.classList.remove('content-original');
        countcontent.classList.remove('content-reverse');
    }
};




{{/js}}